generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  users     User[]    @relation("OrganizationUsers")
  roles     Role[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  roles         Role[]        @relation("UserRoles")
  comments      Comment[]
  settings      UserSettings?
  posts         Post[]
  organizationId String?
  organization  Organization? @relation("OrganizationUsers", fields: [organizationId], references: [id])
  followers     Follow[]      @relation("Follower")
  following     Follow[]      @relation("Following")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  @@index([email])
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String?
  avatar    String?
  location  String?
  website   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id            String       @id @default(uuid())
  name          String
  users         User[]       @relation("UserRoles")
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  @@unique([name, organizationId])
}

model UserSettings {
  id                   String  @id @default(uuid())
  userId               String  @unique
  notificationsEnabled  Boolean @default(true)
  theme                String  @default("light")
  language             String  @default("en")
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id            String       @id @default(uuid())
  content       String
  userId        String
  postId        String?
  organizationId String?
  parentId      String?
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  organization  Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent        Comment?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]    @relation("CommentReplies")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([sessionToken])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}